{"data":{"markdownRemark":{"id":"6e0ad790-0c97-572f-888e-c2039e6b5f2d","html":"<p>During the last few days I’ve been stumbled upon AST in different aspects. I’ve actually started to think about the implications\nof understading AST as it appears in most of the projects I work on. Not only AST is part of the compilation process but it is also\na mechanism many modern tools uses nowdays. In this blog post I will try to explain what is AST, how it works, real world use cases\nand finally I will summarize most of the implications at least in my mind to grasp AST comcept.</p>\n<h1 id=\"what-is-ast\"><a href=\"#what-is-ast\" aria-label=\"what is ast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHAT IS AST?</h1>\n<p>An Abstract Syntax Tree, or AST for short, is a deeply nested object that represents code. Usually AST will come in a form of a Tree\nrepresentation of the abstract syntactic structure of a source code. The “abstract” acornym used in a sense that it does not\nrepresent every detail appearing in the real syntax, but rather just the structure, and a syntactic construct like an if-condition-then\nexpression may be denoted by means of a single node with three branches.</p>\n<p>AST used widely in compilers to represent the structure of program code, but can also be found inside transpilers, linters,\ncode generation tools or in other applications where the understading of the code is a matter.</p>\n<p>The typical implementation of an AST (speaking mostly about OO languages such as Java/C#) makes heavy use of polymorphism.\nThe nodes in the AST are typically implemented with a variety of classes, all deriving from a common <code class=\"language-text\">ASTNode</code> class.\nFor each syntactical construct in the language you are processing, there will be a class representing that construct in AST,\nfor an example a <code class=\"language-text\">VariableNode</code> node will represent variable names, AssignmentNode will represent an assignment operations, etc.\nEach node type specifies if that node has children, if so than how many children it has and possibly of what type. For an example,\na <code class=\"language-text\">ConstantNode</code> will typically have no children, whereas an <code class=\"language-text\">AssignmentNode</code> will have two children associated to it.</p>\n<p>Many times you will encounter the acronym of Concrete Syntax Tree (aka Parse Tree) vs Syntax Tree, let’s clarify the difference\nbetween the two. Concrete Syntax tree is a concerete representation of the input. The concerete syntax tree retains all of the information\nof the input. AST however is an abstract representation of the input. Parents are not present in the AST because the associations\nare derivable from the tree structure.</p>\n<p>Let’s look at a simple AST example of a pseudo-code:</p>\n<p><code class=\"language-text\">(add 2 (subtract 4 2))</code></p>\n<p>For the following pseudo code example the following tree would be generated:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n\ttype: &#39;Program&#39;,\n\tbody: [{\n\ttype: &#39;CallExpression&#39;,\n\tname: &#39;add&#39;,\n\tparams: [{\n\t\ttype: &#39;NumberLiteral&#39;,\n\t\tvalue: &#39;2&#39;,\n\t}, {\n\t\ttype: &#39;CallExpression&#39;,\n\t\tname: &#39;subtract&#39;,\n\t\tparams: [{\n\t\ttype: &#39;NumberLiteral&#39;,\n\t\tvalue: &#39;4&#39;,\n\t\t}, {\n\t\ttype: &#39;NumberLiteral&#39;,\n\t\tvalue: &#39;2&#39;,\n\t\t}]\n\t}]\n\t}]\n}\n\t```\n- [WHAT IS AST?](#what-is-ast)\n\t- [The first transition](#the-first-transition)\n\t- [The digital age](#the-digital-age)\n\t- [Loss of humanity through transitions](#loss-of-humanity-through-transitions)\n\t- [Chasing perfection](#chasing-perfection)\n\nAn Essay on Typography by Eric Gill takes the reader back to the year 1930. The year when a conflict between two worlds came to its term. The machines of the industrial world finally took over the handicrafts.\n\nThe typography of this industrial age was no longer handcrafted. Mass production and profit became more important. Quantity mattered more than the quality. The books and printed works in general lost a part of its humanity. The typefaces were not produced by craftsmen anymore. It was the machines printing and tying the books together now. The craftsmen had to let go of their craft and became a cog in the process. An extension of the industrial machine.\n\nBut the victory of the industrialism didn’t mean that the craftsmen were completely extinct. The two worlds continued to coexist independently. Each recognising the good in the other — the power of industrialism and the humanity of craftsmanship. This was the second transition that would strip typography of a part of its humanity. We have to go 500 years back in time to meet the first one.\n\n## The first transition\n\nA similar conflict emerged after the invention of the first printing press in Europe. Johannes Gutenberg invented movable type and used it to produce different compositions. His workshop could print up to 240 impressions per hour. Until then, the books were being copied by hand. All the books were handwritten and decorated with hand drawn ornaments and figures. A process of copying a book was long but each book, even a copy, was a work of art.\n\nThe first printed books were, at first, perceived as inferior to the handwritten ones. They were smaller and cheaper to produce. Movable type provided the printers with flexibility that allowed them to print books in languages other than Latin. Gill describes the transition to industrialism as something that people needed and wanted. Something similar happened after the first printed books emerged. People wanted books in a language they understood and they wanted books they could take with them. They were hungry for knowledge and printed books satisfied this hunger.\n\n![42-line-bible.jpg](/media/42-line-bible.jpg)\n\n_The 42–Line Bible, printed by Gutenberg._\n\nBut, through this transition, the book lost a large part of its humanity. The machine took over most of the process but craftsmanship was still a part of it. The typefaces were cut manually by the first punch cutters. The paper was made by hand. The illustrations and ornaments were still being hand drawn. These were the remains of the craftsmanship that went almost extinct in the times of Eric Gill.\n\n## The digital age\n\nThe first transition took away a large part of humanity from written communication. Industrialisation, the second transition described by Eric Gill, took away most of what was left. But it’s the third transition that stripped it naked. Typefaces are faceless these days. They’re just fonts on our computers. Hardly anyone knows their stories. Hardly anyone cares. Flicking through thousands of typefaces and finding the “right one” is a matter of minutes.\n\n&gt; In the new computer age the proliferation of typefaces and type manipulations represents a new level of visual pollution threatening our culture. Out of thousands of typefaces, all we need are a few basic ones, and trash the rest.\n&gt;\n&gt; — Massimo Vignelli\n\nTypography is not about typefaces. It’s not about what looks best, it’s about what feels right. What communicates the message best. Typography, in its essence, is about the message. “Typographical design should perform optically what the speaker creates through voice and gesture of his thoughts.”, as El Lissitzky, a famous Russian typographer, put it.\n\n## Loss of humanity through transitions\n\nEach transition took away a part of humanity from written language. Handwritten books being the most humane form and the digital typefaces being the least. Overuse of Helvetica is a good example. Messages are being told in a typeface just because it’s a safe option. It’s always there. Everyone knows it but yet, nobody knows it. Stop someone on the street and ask him what Helvetica is? Ask a designer the same question. Ask him where it came from, when, why and who designed it. Most of them will fail to answer these questions. Most of them used it in their precious projects but they still don’t spot it in the street.\n\n&lt;figure&gt;\n\t&lt;blockquote&gt;\n\t\t&lt;p&gt;Knowledge of the quality of a typeface is of the greatest importance for the functional, aesthetic and psychological effect.&lt;/p&gt;\n\t\t&lt;footer&gt;\n\t\t\t&lt;cite&gt;— Josef Mueller-Brockmann&lt;/cite&gt;\n\t\t&lt;/footer&gt;\n\t&lt;/blockquote&gt;\n&lt;/figure&gt;\n\nTypefaces don’t look handmade these days. And that’s all right. They don’t have to. Industrialism took that away from them and we’re fine with it. We’ve traded that part of humanity for a process that produces more books that are easier to read. That can’t be bad. And it isn’t.\n\n&gt; Humane typography will often be comparatively rough and even uncouth; but while a certain uncouthness does not seriously matter in humane works, uncouthness has no excuse whatever in the productions of the machine.\n&gt;\n&gt; — Eric Gill\n\nWe’ve come close to “perfection” in the last five centuries. The letters are crisp and without rough edges. We print our compositions with high–precision printers on a high quality, machine made paper.\n\n![type-through-time.jpg](/media/type-through-time.jpg)\n\n_Type through 5 centuries._\n\nWe lost a part of ourselves because of this chase after perfection. We forgot about the craftsmanship along the way. And the worst part is that we don’t care. The transition to the digital age made that clear. We choose typefaces like clueless zombies. There’s no meaning in our work. Type sizes, leading, margins… It’s all just a few clicks or lines of code. The message isn’t important anymore. There’s no more “why” behind the “what”.\n\n## Chasing perfection\n\nHuman beings aren’t perfect. Perfection is something that will always elude us. There will always be a small part of humanity in everything we do. No matter how small that part, we should make sure that it transcends the limits of the medium. We have to think about the message first. What typeface should we use and why? Does the typeface match the message and what we want to communicate with it? What will be the leading and why? Will there be more typefaces in our design? On what ground will they be combined? What makes our design unique and why? This is the part of humanity that is left in typography. It might be the last part. Are we really going to give it up?\n\n_Originally published by [Matej Latin](http://matejlatin.co.uk/) on [Medium](https://medium.com/design-notes/humane-typography-in-the-digital-age-9bd5c16199bd?ref=webdesignernews.com#.lygo82z0x)._</code></pre></div>","fields":{"slug":"/posts/humane-typography-in-the-digital-age/","tagSlugs":["/tag/internals/","/tag/compilers/","/tag/parsing/","/tag/ast/"]},"frontmatter":{"date":"2019-05-17T22:40:32.169Z","description":"The friendly journey to the AST WORLD.","tags":["Internals","Compilers","Parsing","AST"],"title":"Dive deep into AST"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/humane-typography-in-the-digital-age/"}}