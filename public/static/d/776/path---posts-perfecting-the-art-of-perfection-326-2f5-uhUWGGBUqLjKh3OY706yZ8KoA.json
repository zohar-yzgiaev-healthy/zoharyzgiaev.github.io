{"data":{"markdownRemark":{"id":"4aa75850-7558-5034-8eb2-5cdfd75d3587","html":"<p><img src=\"/media/posts/git-internals/cover.jpeg\" alt=\"Git internal Cover\"></p>\n<p>Who doesn’t know Git? Most of us are probably using Git or some other source control tool in our everyday life. In this article I will explain how Git works behind the scenes, we’ll dive into the HEAD file, how different Git flow commands work and will explore different Git terminologies. This knowledge will not only improve our Git capabilities but will also introduce deep understanding which will help us build different products in our future career.</p>\n<p>In this article I assume you have basic understanding of what Git is, how is it different from other source control tools and that you have used basic git before.</p>\n<p><strong>Disclaimer</strong>: This article is intended for people who want to expand their knowledge in ‘git-internals’ which is a wide topic to understand Git behind the scenes, you won’t learn how to use different git command in this article but rather how they work.</p>\n<h2 id=\"it-all-starts-from-the-basics\"><a href=\"#it-all-starts-from-the-basics\" aria-label=\"it all starts from the basics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It all starts from the basics</h2>\n<p><img src=\"/media/posts/git-internals/git-push-meme.png\" alt=\"Git push meme\"></p>\n<p>In order to start hacking with Git we will need to use the <code class=\"language-text\">git init</code> command which will create a local repository for us. This command created a hidden folder with the name of <code class=\"language-text\">.git</code> which represents the whole repository. From now on, every Git command we will use will be affected by the hidden .git folder that has been just created.</p>\n<p><img src=\"/media/posts/git-internals/git-01.png\" alt=\"contents of the hidden .git folder\">\n<em>contents of the hidden .git folder</em></p>\n<p>Let’s dive into the contents of the .git folder, this folder contains different folders &#x26; files which responsible for managing your repository:</p>\n<ul>\n<li>Objects directory — — A folder that lists all the files history, we will talk briefly about this directory soon.</li>\n<li>Hooks directory — A folder that contains hook scripts that can be run before/after different Git commands.</li>\n<li>Info directory — A folder that contains the exclude file which is responsible for IDE changes, this file is similar to .gitignore but it doesn’t intended for sharing.</li>\n<li>Refs directory — A folder that contains all of the configurations of every tag/branch of the repository.</li>\n<li>Head file — a file that serves Git in tracking the current branch, this file contains a pointer to the refs directory.</li>\n<li>Config file — the configuration file of the repository, every time we run the Git config command this file is changing.</li>\n<li>Description file — contains a description text about the repository.</li>\n</ul>\n<h2 id=\"cant-get-you-out-of-my-head\"><a href=\"#cant-get-you-out-of-my-head\" aria-label=\"cant get you out of my head permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Can’t Get You Out Of My Head</h2>\n<p>All of the Git commands which synchronize the local repository and the remote repository are going through a middle station. This middle station has different names such as staging area, cache and index file.</p>\n<p>The index file is a binary file which represents kind of a small file system which contains a pointer to different files in the working directory. The responsibility of the index file is to manage the differences between the working directory to the repository itself.</p>\n<p>Let’s see now how all of this is actually implemented.</p>\n<p>In the beginning of the article when we did <code class=\"language-text\">git init</code> we saw a new hidden folder named <code class=\"language-text\">.git</code> but this folder didn’t include an index file. In order to create this index file, we will use <code class=\"language-text\">git add</code>:</p>\n<p><img src=\"/media/posts/git-internals/git-01.png\" alt=\"index file has been created after we used the &#x60;git add&#x60; command\">\n<em>contents of the hidden .git folder</em></p>\n<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis.</p>\n<p>Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus.</p>","fields":{"slug":"/posts/perfecting-the-art-of-perfection/","tagSlugs":["/tag/internals/","/tag/git/","/tag/open-source/","/tag/dive-deep/","/tag/tools/"]},"frontmatter":{"date":"2019-01-12T23:46:37.121Z","description":"Who doesn’t know Git? Most of us are probably using Git or some other source control tool in our everyday life. In this article I will explain how Git works behind the scenes, we’ll dive into the HEAD file, how different Git flow commands work and will explore different Git terminologies. This knowledge will not only improve our Git capabilities but will also introduce deep understanding which will help us build different products in our future career.","tags":["internals","git","open source","dive deep","tools"],"title":"Git Internals"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/perfecting-the-art-of-perfection/"}}