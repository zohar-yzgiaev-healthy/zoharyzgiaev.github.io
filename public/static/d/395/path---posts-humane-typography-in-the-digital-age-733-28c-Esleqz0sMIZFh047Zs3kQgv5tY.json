{"data":{"markdownRemark":{"id":"6e0ad790-0c97-572f-888e-c2039e6b5f2d","html":"<p>During the last few days I’ve been stumbled upon AST in different aspects. I’ve actually started to think about the implications\nof understading AST as it appears in most of the projects I work on. Not only AST is part of the compilation process but it is also\na mechanism many modern tools uses nowdays. In this blog post I will try to explain what is AST, how it works, real world use cases\nand finally I will summarize most of the implications at least in my mind to grasp AST comcept.</p>\n<h1 id=\"what-is-ast\"><a href=\"#what-is-ast\" aria-label=\"what is ast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHAT IS AST?</h1>\n<p>An Abstract Syntax Tree, or AST for short, is a deeply nested object that represents code. Usually AST will come in a form of a Tree\nrepresentation of the abstract syntactic structure of a source code. The “abstract” acornym used in a sense that it does not\nrepresent every detail appearing in the real syntax, but rather just the structure, and a syntactic construct like an if-condition-then\nexpression may be denoted by means of a single node with three branches.</p>\n<p>AST used widely in compilers to represent the structure of program code, but can also be found inside transpilers, linters,\ncode generation tools or in other applications where the understading of the code is a matter.</p>\n<p>The typical implementation of an AST (speaking mostly about OO languages such as Java/C#) makes heavy use of polymorphism.\nThe nodes in the AST are typically implemented with a variety of classes, all deriving from a common <code class=\"language-text\">ASTNode</code> class.\nFor each syntactical construct in the language you are processing, there will be a class representing that construct in AST,\nfor an example a <code class=\"language-text\">VariableNode</code> node will represent variable names, AssignmentNode will represent an assignment operations, etc.\nEach node type specifies if that node has children, if so than how many children it has and possibly of what type. For an example,\na <code class=\"language-text\">ConstantNode</code> will typically have no children, whereas an <code class=\"language-text\">AssignmentNode</code> will have two children associated to it.</p>\n<p>Many times you will encounter the acronym of Concrete Syntax Tree (aka Parse Tree) vs Syntax Tree, let’s clarify the difference\nbetween the two. Concrete Syntax tree is a concerete representation of the input. The concerete syntax tree retains all of the information\nof the input. AST however is an abstract representation of the input. Parents are not present in the AST because the associations\nare derivable from the tree structure.</p>\n<p>Let’s look at a simple AST example of a pseudo-code:</p>\n<p><code class=\"language-text\">(add 2 (subtract 4 2))</code></p>\n<p>For the following pseudo code example the following tree would be generated:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"subtract\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AST can also be transofrmed using design patterns, most widely the visitor pattern is being used to navigate through the AST,\nlet’s take a look of the following example written in Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> ast\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyVisitor</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>nodeVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">visit_BinaryOp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>visit<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> node<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">,</span>\n        self<span class=\"token punctuation\">.</span>visit<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">visit_Num</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> node<span class=\"token punctuation\">.</span>n</code></pre></div>\n<p>nodeVisitor is a base class that walks the abstract syntax tree and calls a visitor function for every node.\nThe nodeVisitor base class implements the visitor design pattern, which is a way of seperating an algorithm from an object structure\non which it operates. The visitor design patterns allows adding new virtual functions to a family of classes, without modifying the classes.\nclasses. Instead, a visitor class is created that implements all of the appropriate specializations of the virtual function.</p>\n<p>Besides visiting the nodes of the tree we can walk down the tree and allow modification of nodes. Usually modifying the tree nodes\nwill be done by using the nodeTransformer implementation of the transformer design pattern. Basically, the nodeTransformer\nwill walk the AST and use the return value of the visitor methods to replace or remove the old node.</p>\n<h2 id=\"ast-use-cases\"><a href=\"#ast-use-cases\" aria-label=\"ast use cases permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AST Use Cases</h2>\n<h3 id=\"1st-use-case---compilers-if-you-dont-know-how-compilers-work-then-you-dont-know-how-computers-work\"><a href=\"#1st-use-case---compilers-if-you-dont-know-how-compilers-work-then-you-dont-know-how-computers-work\" aria-label=\"1st use case   compilers if you dont know how compilers work then you dont know how computers work permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1st use case - Compilers: “If you don’t know how compilers work, then you don’t know how computers work”</h3>\n<p>Most compilers break down into 3 primary stages: Parsing, Transoformation, and code generation.</p>\n<ol>\n<li>\n<p>Parsing is taking a raw code and turning it into a more abstract representation of the code (Parse Tree, Abstract Syntax Tree)</p>\n</li>\n<li>\n<p>Transformation takes the abstract representation and manipulates to do whatever the compiler wants it to. (Using transformation methods on the AST or the parse tree)</p>\n</li>\n<li>\n<p>Code generation - takes the transformed representation of the code and turns it into the new code. (Again, using transformation</p>\n</li>\n</ol>\n<p>Let’s take a look at the <code class=\"language-text\">Super tiny compiler</code> source code, the <code class=\"language-text\">super tiny compiler</code> compiles list-like function calls into\nC-like function calls. The following snippet code takes an array of tokens and turns it into an AST.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Inside the walk function we start by grabbing the `current` token.</span>\n  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We're going to split each type of token off into a different code path,</span>\n  <span class=\"token comment\">// starting off with `number` tokens.</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// We test to see if we have a `number` token.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If we have one, we'll increment `current`.</span>\n    current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// And we'll return a new AST node called `NumberLiteral` and setting its</span>\n    <span class=\"token comment\">// value to the value of our token.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// If we have a string we will do the same as number and create a</span>\n  <span class=\"token comment\">// `StringLiteral` node.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Next we're going to look for CallExpressions. We start this off when we</span>\n  <span class=\"token comment\">// encounter an open parenthesis.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We'll increment `current` to skip the parenthesis since we don't care</span>\n    <span class=\"token comment\">// about it in our AST.</span>\n    token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We create a base node with the type `CallExpression`, and we're going</span>\n    <span class=\"token comment\">// to set the name as the current token's value since the next token after</span>\n    <span class=\"token comment\">// the open parenthesis is the name of the function.</span>\n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We increment `current` *again* to skip the name token.</span>\n    token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// And now we want to loop through each token that will be the `params` of</span>\n    <span class=\"token comment\">// our `CallExpression` until we encounter a closing parenthesis.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Now this is where recursion comes in. Instead of trying to parse a</span>\n    <span class=\"token comment\">// potentially infinitely nested set of nodes we're going to rely on</span>\n    <span class=\"token comment\">// recursion to resolve things.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// To explain this, let's take our Lisp code. You can see that the</span>\n    <span class=\"token comment\">// parameters of the `add` are a number and a nested `CallExpression` that</span>\n    <span class=\"token comment\">// includes its own numbers.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   (add 2 (subtract 4 2))</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// You'll also notice that in our tokens array we have multiple closing</span>\n    <span class=\"token comment\">// parenthesis.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   [</span>\n    <span class=\"token comment\">//     { type: 'paren',  value: '('        },</span>\n    <span class=\"token comment\">//     { type: 'name',   value: 'add'      },</span>\n    <span class=\"token comment\">//     { type: 'number', value: '2'        },</span>\n    <span class=\"token comment\">//     { type: 'paren',  value: '('        },</span>\n    <span class=\"token comment\">//     { type: 'name',   value: 'subtract' },</span>\n    <span class=\"token comment\">//     { type: 'number', value: '4'        },</span>\n    <span class=\"token comment\">//     { type: 'number', value: '2'        },</span>\n    <span class=\"token comment\">//     { type: 'paren',  value: ')'        }, &lt;&lt;&lt; Closing parenthesis</span>\n    <span class=\"token comment\">//     { type: 'paren',  value: ')'        }, &lt;&lt;&lt; Closing parenthesis</span>\n    <span class=\"token comment\">//   ]</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// We're going to rely on the nested `walk` function to increment our</span>\n    <span class=\"token comment\">// `current` variable past any nested `CallExpression`.</span>\n\n    <span class=\"token comment\">// So we create a `while` loop that will continue until it encounters a</span>\n    <span class=\"token comment\">// token with a `type` of `'paren'` and a `value` of a closing</span>\n    <span class=\"token comment\">// parenthesis.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n      token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we'll call the `walk` function which will return a `node` and we'll</span>\n      <span class=\"token comment\">// push it into our `node.params`.</span>\n      node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Finally we will increment `current` one last time to skip the closing</span>\n    <span class=\"token comment\">// parenthesis.</span>\n    current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// And return the node.</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Again, if we haven't recognized the token type by now we're going to</span>\n  <span class=\"token comment\">// throw an error.</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As we can see from the sample code above, our defined <code class=\"language-text\">walk</code> function creates the node depending on the type of the token,\neach node has both type and value fields associated to it.</p>\n<p>Than, let’s take a look at how we can walk through the tree and visit each node:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// So we define a traverser function which accepts an AST and a</span>\n<span class=\"token comment\">// visitor. Inside we're going to define two functions...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast<span class=\"token punctuation\">,</span> visitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A `traverseArray` function that will allow us to iterate over an array and</span>\n  <span class=\"token comment\">// call the next function that we will define: `traverseNode`.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// `traverseNode` will accept a `node` and its `parent` node. So that it can</span>\n  <span class=\"token comment\">// pass both to our visitor methods.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We start by testing for the existence of a method on the visitor with a</span>\n    <span class=\"token comment\">// matching `type`.</span>\n    <span class=\"token keyword\">let</span> methods <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If there is an `enter` method for this node type we'll call it with the</span>\n    <span class=\"token comment\">// `node` and its `parent`.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      methods<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Next we are going to split things up by the current node type.</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// We'll start with our top level `Program`. Since Program nodes have a</span>\n      <span class=\"token comment\">// property named body that has an array of nodes, we will call</span>\n      <span class=\"token comment\">// `traverseArray` to traverse down into them.</span>\n      <span class=\"token comment\">//</span>\n      <span class=\"token comment\">// (Remember that `traverseArray` will in turn call `traverseNode` so  we</span>\n      <span class=\"token comment\">// are causing the tree to be traversed recursively)</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Next we do the same with `CallExpression` and traverse their `params`.</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// In the cases of `NumberLiteral` and `StringLiteral` we don't have any</span>\n      <span class=\"token comment\">// child nodes to visit, so we'll just break.</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// And again, if we haven't recognized the node type then we'll throw an</span>\n      <span class=\"token comment\">// error.</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// If there is an `exit` method for this node type we'll call it with the</span>\n    <span class=\"token comment\">// `node` and its `parent`.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      methods<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Finally we kickstart the traverser by calling `traverseNode` with our ast</span>\n  <span class=\"token comment\">// with no `parent` because the top level of the AST doesn't have a parent.</span>\n  <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next stage would be the transformation which is going to take the AST that we have build and pass it to our traverser\nfunction with a visitor and will create a new AST. (Usually, each programming language has it’s own constraints and therefore\nit’s own AST)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We'll create a `newAst` which like our previous AST will have a program</span>\n  <span class=\"token comment\">// node.</span>\n  <span class=\"token keyword\">let</span> newAst <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Next I'm going to cheat a little and create a bit of a hack. We're going to</span>\n  <span class=\"token comment\">// use a property named `context` on our parent nodes that we're going to push</span>\n  <span class=\"token comment\">// nodes to their parent's `context`. Normally you would have a better</span>\n  <span class=\"token comment\">// abstraction than this, but for our purposes this keeps things simple.</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// Just take note that the context is a reference *from* the old ast *to* the</span>\n  <span class=\"token comment\">// new ast.</span>\n  ast<span class=\"token punctuation\">.</span>_context <span class=\"token operator\">=</span> newAst<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We'll start by calling the traverser function with our ast and a visitor.</span>\n  <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The first visitor method accepts any `NumberLiteral`</span>\n    NumberLiteral<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// We'll visit them on enter.</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// We'll create a new node also named `NumberLiteral` that we will push to</span>\n        <span class=\"token comment\">// the parent context.</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Next we have `StringLiteral`</span>\n    StringLiteral<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Next up, `CallExpression`.</span>\n    CallExpression<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// We start creating a new node `CallExpression` with a nested</span>\n        <span class=\"token comment\">// `Identifier`.</span>\n        <span class=\"token keyword\">let</span> expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n          callee<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>name\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Next we're going to define a new context on the original</span>\n        <span class=\"token comment\">// `CallExpression` node that will reference the `expression`'s arguments</span>\n        <span class=\"token comment\">// so that we can push arguments.</span>\n        node<span class=\"token punctuation\">.</span>_context <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Then we're going to check if the parent node is a `CallExpression`.</span>\n        <span class=\"token comment\">// If it is not...</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// We're going to wrap our `CallExpression` node with an</span>\n          <span class=\"token comment\">// `ExpressionStatement`. We do this because the top level</span>\n          <span class=\"token comment\">// `CallExpression` in JavaScript are actually statements.</span>\n          expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ExpressionStatement\"</span><span class=\"token punctuation\">,</span>\n            expression<span class=\"token punctuation\">:</span> expression\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Last, we push our (possibly wrapped) `CallExpression` to the `parent`'s</span>\n        <span class=\"token comment\">// `context`.</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// At the end of our transformer function we'll return the new ast that we</span>\n  <span class=\"token comment\">// just created.</span>\n  <span class=\"token keyword\">return</span> newAst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lastly, we would need to generate the code by recursively printing each node in the tree into one giant string.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We'll break things down by the `type` of the `node`.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If we have a `Program` node. We will map through each node in the `body`</span>\n    <span class=\"token comment\">// and run them through the code generator and join them with a newline.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For `ExpressionStatement` we'll call the code generator on the nested</span>\n    <span class=\"token comment\">// expression and we'll add a semicolon...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ExpressionStatement\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token comment\">// &lt;&lt; (...because we like to code the *correct* way)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For `CallExpression` we will print the `callee`, add an open</span>\n    <span class=\"token comment\">// parenthesis, we'll map through each node in the `arguments` array and run</span>\n    <span class=\"token comment\">// them through the code generator, joining them with a comma, and then</span>\n    <span class=\"token comment\">// we'll add a closing parenthesis.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span>\n        node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\")\"</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For `Identifier` we'll just return the `node`'s name.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For `NumberLiteral` we'll just return the `node`'s value.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// For `StringLiteral` we'll add quotations around the `node`'s value.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'\"'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// And if we haven't recognized the node, we'll throw an error.</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voila! We’ve done writing a simple compiler using AST, as you can see from the above examples understading AST will help us as developers\nto understand it programmaticaly and create applications which relies on this kind of understanding.</p>\n<h3 id=\"2nd-use-case---babel-compiler-for-writing-next-generation-javascript\"><a href=\"#2nd-use-case---babel-compiler-for-writing-next-generation-javascript\" aria-label=\"2nd use case   babel compiler for writing next generation javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2nd use case - Babel: compiler for writing next generation JavaScript</h3>\n<ul>\n<li>\n<p><a href=\"#what-is-ast\">WHAT IS AST?</a></p>\n<ul>\n<li>\n<p><a href=\"#ast-use-cases\">AST Use Cases</a></p>\n<ul>\n<li><a href=\"#1st-use-case---compilers-%22if-you-dont-know-how-compilers-work-then-you-dont-know-how-computers-work%22\">1st use case - Compilers: “If you don’t know how compilers work, then you don’t know how computers work”</a></li>\n<li><a href=\"#2nd-use-case---babel-compiler-for-writing-next-generation-javascript\">2nd use case - Babel: compiler for writing next generation JavaScript</a></li>\n</ul>\n</li>\n<li><a href=\"#the-first-transition\">The first transition</a></li>\n<li><a href=\"#the-digital-age\">The digital age</a></li>\n<li><a href=\"#loss-of-humanity-through-transitions\">Loss of humanity through transitions</a></li>\n<li><a href=\"#chasing-perfection\">Chasing perfection</a></li>\n</ul>\n</li>\n</ul>\n<p>An Essay on Typography by Eric Gill takes the reader back to the year 1930. The year when a conflict between two worlds came to its term. The machines of the industrial world finally took over the handicrafts.</p>\n<p>The typography of this industrial age was no longer handcrafted. Mass production and profit became more important. Quantity mattered more than the quality. The books and printed works in general lost a part of its humanity. The typefaces were not produced by craftsmen anymore. It was the machines printing and tying the books together now. The craftsmen had to let go of their craft and became a cog in the process. An extension of the industrial machine.</p>\n<p>But the victory of the industrialism didn’t mean that the craftsmen were completely extinct. The two worlds continued to coexist independently. Each recognising the good in the other — the power of industrialism and the humanity of craftsmanship. This was the second transition that would strip typography of a part of its humanity. We have to go 500 years back in time to meet the first one.</p>\n<h2 id=\"the-first-transition\"><a href=\"#the-first-transition\" aria-label=\"the first transition permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The first transition</h2>\n<p>A similar conflict emerged after the invention of the first printing press in Europe. Johannes Gutenberg invented movable type and used it to produce different compositions. His workshop could print up to 240 impressions per hour. Until then, the books were being copied by hand. All the books were handwritten and decorated with hand drawn ornaments and figures. A process of copying a book was long but each book, even a copy, was a work of art.</p>\n<p>The first printed books were, at first, perceived as inferior to the handwritten ones. They were smaller and cheaper to produce. Movable type provided the printers with flexibility that allowed them to print books in languages other than Latin. Gill describes the transition to industrialism as something that people needed and wanted. Something similar happened after the first printed books emerged. People wanted books in a language they understood and they wanted books they could take with them. They were hungry for knowledge and printed books satisfied this hunger.</p>\n<p><img src=\"/media/42-line-bible.jpg\" alt=\"42-line-bible.jpg\"></p>\n<p><em>The 42–Line Bible, printed by Gutenberg.</em></p>\n<p>But, through this transition, the book lost a large part of its humanity. The machine took over most of the process but craftsmanship was still a part of it. The typefaces were cut manually by the first punch cutters. The paper was made by hand. The illustrations and ornaments were still being hand drawn. These were the remains of the craftsmanship that went almost extinct in the times of Eric Gill.</p>\n<h2 id=\"the-digital-age\"><a href=\"#the-digital-age\" aria-label=\"the digital age permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The digital age</h2>\n<p>The first transition took away a large part of humanity from written communication. Industrialisation, the second transition described by Eric Gill, took away most of what was left. But it’s the third transition that stripped it naked. Typefaces are faceless these days. They’re just fonts on our computers. Hardly anyone knows their stories. Hardly anyone cares. Flicking through thousands of typefaces and finding the “right one” is a matter of minutes.</p>\n<blockquote>\n<p>In the new computer age the proliferation of typefaces and type manipulations represents a new level of visual pollution threatening our culture. Out of thousands of typefaces, all we need are a few basic ones, and trash the rest.</p>\n<p>— Massimo Vignelli</p>\n</blockquote>\n<p>Typography is not about typefaces. It’s not about what looks best, it’s about what feels right. What communicates the message best. Typography, in its essence, is about the message. “Typographical design should perform optically what the speaker creates through voice and gesture of his thoughts.”, as El Lissitzky, a famous Russian typographer, put it.</p>\n<h2 id=\"loss-of-humanity-through-transitions\"><a href=\"#loss-of-humanity-through-transitions\" aria-label=\"loss of humanity through transitions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loss of humanity through transitions</h2>\n<p>Each transition took away a part of humanity from written language. Handwritten books being the most humane form and the digital typefaces being the least. Overuse of Helvetica is a good example. Messages are being told in a typeface just because it’s a safe option. It’s always there. Everyone knows it but yet, nobody knows it. Stop someone on the street and ask him what Helvetica is? Ask a designer the same question. Ask him where it came from, when, why and who designed it. Most of them will fail to answer these questions. Most of them used it in their precious projects but they still don’t spot it in the street.</p>\n<figure>\n\t<blockquote>\n\t\t<p>Knowledge of the quality of a typeface is of the greatest importance for the functional, aesthetic and psychological effect.</p>\n\t\t<footer>\n\t\t\t<cite>— Josef Mueller-Brockmann</cite>\n\t\t</footer>\n\t</blockquote>\n</figure>\n<p>Typefaces don’t look handmade these days. And that’s all right. They don’t have to. Industrialism took that away from them and we’re fine with it. We’ve traded that part of humanity for a process that produces more books that are easier to read. That can’t be bad. And it isn’t.</p>\n<blockquote>\n<p>Humane typography will often be comparatively rough and even uncouth; but while a certain uncouthness does not seriously matter in humane works, uncouthness has no excuse whatever in the productions of the machine.</p>\n<p>— Eric Gill</p>\n</blockquote>\n<p>We’ve come close to “perfection” in the last five centuries. The letters are crisp and without rough edges. We print our compositions with high–precision printers on a high quality, machine made paper.</p>\n<p><img src=\"/media/type-through-time.jpg\" alt=\"type-through-time.jpg\"></p>\n<p><em>Type through 5 centuries.</em></p>\n<p>We lost a part of ourselves because of this chase after perfection. We forgot about the craftsmanship along the way. And the worst part is that we don’t care. The transition to the digital age made that clear. We choose typefaces like clueless zombies. There’s no meaning in our work. Type sizes, leading, margins… It’s all just a few clicks or lines of code. The message isn’t important anymore. There’s no more “why” behind the “what”.</p>\n<h2 id=\"chasing-perfection\"><a href=\"#chasing-perfection\" aria-label=\"chasing perfection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chasing perfection</h2>\n<p>Human beings aren’t perfect. Perfection is something that will always elude us. There will always be a small part of humanity in everything we do. No matter how small that part, we should make sure that it transcends the limits of the medium. We have to think about the message first. What typeface should we use and why? Does the typeface match the message and what we want to communicate with it? What will be the leading and why? Will there be more typefaces in our design? On what ground will they be combined? What makes our design unique and why? This is the part of humanity that is left in typography. It might be the last part. Are we really going to give it up?</p>\n<p><em>Originally published by <a href=\"http://matejlatin.co.uk/\">Matej Latin</a> on <a href=\"https://medium.com/design-notes/humane-typography-in-the-digital-age-9bd5c16199bd?ref=webdesignernews.com#.lygo82z0x\">Medium</a>.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","fields":{"slug":"/posts/humane-typography-in-the-digital-age/","tagSlugs":["/tag/internals/","/tag/compilers/","/tag/parsing/","/tag/ast/"]},"frontmatter":{"date":"2019-05-17T22:40:32.169Z","description":"The friendly journey to the AST WORLD.","tags":["Internals","Compilers","Parsing","AST"],"title":"Dive deep into AST"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/humane-typography-in-the-digital-age/"}}